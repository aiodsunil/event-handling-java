buildscript {
    ext {
        springBootVersion = '2.0.0.M7'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1")

    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

jar {
    baseName = 'event-handling'
    version = project.version
}

group = 'com.event'
version = '0.0.1-SNAPSHOT'
//Junit5 version
ext.hamcrestVersion      = '1.3'
ext.junitJupiterVersion  = '5.1.0-M1'
ext.junitPlatformVersion = '1.1.0-M1'
//Json api
ext.jacksonVersion       = '2.9.3'
ext.jsonpathVersion      = '2.4.0'
//log4j
//ext.log4JVersion         = '2.10.0'
repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    //spring boot
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    testCompile('io.projectreactor:reactor-test')
    //Jackson
    testCompile("com.jayway.jsonpath:json-path:${jsonpathVersion}")
    testCompile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    //Junit5
    compile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    // Enable use of the JUnitPlatform Runner within the IDE
    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
    //log4j
//    testRuntime("org.apache.logging.log4j:log4j-core:${log4JVersion}")
//    testRuntime("org.apache.logging.log4j:log4j-jul:${log4JVersion}")
//    testRuntime("org.apache.logging.log4j:log4j-jcl:${log4JVersion}")
//    testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:${log4JVersion}")
}
compileJava {
    sourceCompatibility = 1.9
    targetCompatibility = 1.9
}

compileTestJava {
    sourceCompatibility = 1.9
    targetCompatibility = 1.9
    options.compilerArgs += '-parameters'
}

junitPlatform {
    details 'tree'
    filters.engines.include 'junit-jupiter' // we only want to run JUnit Jupiter tests...
    //logManager 'org.apache.logging.log4j.jul.LogManager'
}

javadoc {
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

configurations.all {
    // Do NOT cache snapshot JARs for more than 60 seconds.
    resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}